#include <iostream>
#include <utility>
#include <cmath>
using namespace std;
 

struct Node
{
    int data;
    Node *left, *right;
 
    Node(int data)
    {
        this->data = data;
        this->left = this->right = nullptr;
    }
};
 

int isHeightBalanced(Node* root, bool &isBalanced)
{

    if (root == nullptr || !isBalanced) {
        return 0;
    }
 

    int left_height = isHeightBalanced(root->left, isBalanced);
 
    
    int right_height = isHeightBalanced(root->right, isBalanced);
 
    if (abs(left_height - right_height) > 1) {
        isBalanced = false;
    }
 
    
    return max(left_height, right_height) + 1;
}
 

bool isHeightBalanced(Node* root)
{
    bool isBalanced = true;
    isHeightBalanced(root, isBalanced);
 
    return isBalanced;
}
 
int main()
{
   
 
 
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
 
    if (isHeightBalanced(root)) {
        cout << "Binary tree is balanced";
    }
    else {
        cout << "Binary tree is not balanced";
    }
 
    return 0;
}
